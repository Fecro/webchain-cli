# Appveyor configuration template for Rust using rustup for Rust installation
# https://github.com/starkat99/appveyor-rust

## Operating System (VM environment) ##

# Rust needs at least Visual Studio 2013 Appveyor OS for MSVC targets.
image: Visual Studio 2015

## Build Matrix ##
# This configuration will setup a build for each channel & target combination (12 windows
# combinations in all).
#
# There are 3 channels: stable, beta, and nightly.
#
# Alternatively, the full version may be specified for the channel to build using that specific
# version (e.g. channel: 1.5.0)
#
# The values for target are the set of windows Rust build targets. Each value is of the form
#
# ARCH-pc-windows-TOOLCHAIN
#
# Where ARCH is the target architecture, either x86_64 or i686, and TOOLCHAIN is the linker
# toolchain to use, either msvc or gnu. See https://www.rust-lang.org/downloads.html#win-foot for
# a description of the toolchain differences.
# See https://github.com/rust-lang-nursery/rustup.rs/#toolchain-specification for description of
# toolchains and host triples.
#
# Comment out channel/target combos you do not wish to build in CI.
#
# You may use the `cargoflags` and `RUSTFLAGS` variables to set additional flags for cargo commands
# and rustc, respectively. For instance, you can uncomment the cargoflags lines in the nightly
# channels to enable unstable features when building for nightly. Or you could add additional
# matrix entries to test different combinations of features.
environment:
  GCP_PASSWD:
    secure: GiLB9xoSis0z90cMZO88dhWAhRYpXI65mTuYYQsEOdnf+R1CZkuptKRB6mhdEbDliHu6jGWdW+7A6rpYmmTgpYuXcijONGn8mfXHenW7k48=

  matrix:
    ### MSVC Toolchains ###
    # Stable 64-bit MSVC
    - channel: stable
      target: x86_64-pc-windows-msvc
    # Beta 64-bit MSVC
    - channel: beta
      target: x86_64-pc-windows-msvc

# Only build against the branches that will have pull requests built against them (master).
# Otherwise creating feature branches on this repository and a pull requests against them will
# cause each commit to be tested twice, once for the branch and once for the pull request.
branches:
  only:
    - master

## Install Script ##

# This is the most important part of the Appveyor configuration. This installs the version of Rust
# specified by the 'channel' and 'target' environment variables from the build matrix. This uses
# rustup to install Rust.
#
# For simple configurations, instead of using the build matrix, you can simply set the
# default-toolchain and default-host manually here.
install:
  # Install janus.
  - set PATH=C:\msys64\mingw64\bin;C:\msys64\usr\bin\;%PATH%
  - curl -sL https://raw.githubusercontent.com/ethereumproject/janus/master/get-windows.sh | bash
  - set PATH=./janusbin;%PATH%
  - ps: $env:VERSION_BASE = "$(janus.exe version -format='v%M.%m.x')"
  - ps: $env:VERSION = "$(janus.exe version -format='TAG_OR_NIGHTLY')"

  # https://github.com/rust-lang-nursery/rustup.rs/issues/1316#issuecomment-354156348
  # Downgrade to use older, not-currently-broken version.
  - appveyor DownloadFile https://static.rust-lang.org/rustup/archive/1.7.0/i686-pc-windows-gnu/rustup-init.exe -FileName rustup-init.exe
  # Currently broken version.
  # - appveyor DownloadFile https://win.rustup.rs/ -FileName rustup-init.exe  - rustup-init -yv --default-toolchain %channel% --default-host %target%
  - rustup-init -yv --default-toolchain %channel% --default-host %target%
  - cmd: set PATH=%PATH%;%USERPROFILE%\.cargo\bin
  - rustup update
  - rustc -vV
  - cargo -vV
  - rustup component add rust-src
  - for /f %%i in ('rustc --print sysroot') do set RUST_SRC_PATH=%%i\lib\rustlib\src\rust\src
  - cmd: set RUST_BACKTRACE=1
  - cmd: set RUSTFLAGS=-C target-feature=+crt-static

## Build Script ##

cache:
  - '%USERPROFILE%\.cargo'

# Uses 'cargo build' to build. Alternatively, the project may call rustc directly or perform other
# build commands. Rust will automatically be placed in the PATH environment variable.
build_script:
  - cargo build --all --verbose --release
  - 7z a emerald-%channel%-%target%-%VERSION%.zip ./target/release/emerald-vault.exe
# Uses 'cargo test' to run tests and build. Alternatively, the project may call compiled programs
# directly or perform other testing commands. Rust will automatically be placed in the PATH
# environment variable.
test_script:
  - cargo test --all --verbose %cargoflags%

artifacts:
  - path: '*.zip'
    name: emerald-vault
before_deploy:
  # Set up GCP upload.
  # - nuget install secure-file -ExcludeVersion
  # - secure-file\tools\secure-file -decrypt gcloud-appveyor.json.enc -secret %GCP_PASSWD% -out .gcloud.json
deploy_script:
  - ps: >-
      If ($env:APPVEYOR_REPO_BRANCH -eq 'master') {
        janus.exe deploy -to="builds.etcdevteam.com/emerald-vault/$env:VERSION_BASE/" -files="./*.zip" -key="./gcloud-appveyor.json.enc"
      }
